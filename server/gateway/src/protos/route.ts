// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: route.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

/** Messages for creating a route */
export interface CreateRouteRequest {
  name: string;
  startLocation: string;
  endLocation: string;
  distance: number;
}

export interface CreateRouteResponse {
  /** gRPC uses string for ID for compatibility */
  id: string;
  name: string;
  startLocation: string;
  endLocation: string;
  distance: number;
  /** Include timestamps to match Entity */
  createdAt: string;
  updatedAt: string;
  message: string;
  error: string;
}

/** Messages for finding all routes */
export interface FindAllRoutesRequest {
}

export interface FindAllRoutesResponse {
  routes: Route[];
  error: string;
}

/** Messages for finding a single route */
export interface FindOneRouteRequest {
  id: string;
}

export interface FindOneRouteResponse {
  route: Route | undefined;
  error: string;
}

/** Messages for updating a route */
export interface UpdateRouteRequest {
  id: string;
  name: string;
  startLocation: string;
  endLocation: string;
  distance: number;
}

export interface UpdateRouteResponse {
  route: Route | undefined;
  message: string;
  error: string;
}

/** Messages for deleting a route */
export interface DeleteRouteRequest {
  id: string;
}

export interface DeleteRouteResponse {
  message: string;
  error: string;
}

/** Common Route message format */
export interface Route {
  /** Use string for IDs in gRPC for consistency */
  id: string;
  name: string;
  startLocation: string;
  endLocation: string;
  distance: number;
  /** Use string format for dates in gRPC */
  createdAt: string;
  updatedAt: string;
}

/** Define the gRPC service with the CRUD operations */

export interface RouteServiceClient {
  createRoute(request: CreateRouteRequest): Observable<CreateRouteResponse>;

  findAllRoutes(request: FindAllRoutesRequest): Observable<FindAllRoutesResponse>;

  findOneRoute(request: FindOneRouteRequest): Observable<FindOneRouteResponse>;

  updateRoute(request: UpdateRouteRequest): Observable<UpdateRouteResponse>;

  deleteRoute(request: DeleteRouteRequest): Observable<DeleteRouteResponse>;
}

/** Define the gRPC service with the CRUD operations */

export interface RouteServiceController {
  createRoute(
    request: CreateRouteRequest,
  ): Promise<CreateRouteResponse> | Observable<CreateRouteResponse> | CreateRouteResponse;

  findAllRoutes(
    request: FindAllRoutesRequest,
  ): Promise<FindAllRoutesResponse> | Observable<FindAllRoutesResponse> | FindAllRoutesResponse;

  findOneRoute(
    request: FindOneRouteRequest,
  ): Promise<FindOneRouteResponse> | Observable<FindOneRouteResponse> | FindOneRouteResponse;

  updateRoute(
    request: UpdateRouteRequest,
  ): Promise<UpdateRouteResponse> | Observable<UpdateRouteResponse> | UpdateRouteResponse;

  deleteRoute(
    request: DeleteRouteRequest,
  ): Promise<DeleteRouteResponse> | Observable<DeleteRouteResponse> | DeleteRouteResponse;
}

export function RouteServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createRoute", "findAllRoutes", "findOneRoute", "updateRoute", "deleteRoute"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RouteService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RouteService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROUTE_SERVICE_NAME = "RouteService";
