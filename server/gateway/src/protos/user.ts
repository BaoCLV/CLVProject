// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

/** Define the User message */
export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  role: string;
  address: string;
  phoneNumber: number;
  refreshToken: string;
  createdAt: string;
  updatedAt: string;
}

/** Define request and response messages */
export interface RegisterRequest {
  name: string;
  email: string;
  password: string;
  phoneNumber: number;
  address: string;
}

export interface RegisterResponse {
  activationToken: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  user: User | undefined;
  accessToken: string;
  refreshToken: string;
  error: ErrorResponse | undefined;
}

export interface ActivationRequest {
  activationToken: string;
  activationCode: string;
}

export interface ActivationResponse {
  message: string;
}

export interface LogoutResponse {
  message: string;
}

export interface GetLoggedInUserResponse {
  user: User | undefined;
  accessToken: string;
  refreshToken: string;
}

export interface EmptyRequest {
}

export interface UserListResponse {
  users: User[];
}

export interface ErrorResponse {
  message: string;
}

/** Define the gRPC service */

export interface UserServiceClient {
  register(request: RegisterRequest): Observable<RegisterResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  activateUser(request: ActivationRequest): Observable<ActivationResponse>;

  getUsers(request: EmptyRequest): Observable<UserListResponse>;

  logout(request: EmptyRequest): Observable<LogoutResponse>;

  getLoggedInUser(request: EmptyRequest): Observable<GetLoggedInUserResponse>;
}

/** Define the gRPC service */

export interface UserServiceController {
  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  activateUser(
    request: ActivationRequest,
  ): Promise<ActivationResponse> | Observable<ActivationResponse> | ActivationResponse;

  getUsers(request: EmptyRequest): Promise<UserListResponse> | Observable<UserListResponse> | UserListResponse;

  logout(request: EmptyRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  getLoggedInUser(
    request: EmptyRequest,
  ): Promise<GetLoggedInUserResponse> | Observable<GetLoggedInUserResponse> | GetLoggedInUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "activateUser", "getUsers", "logout", "getLoggedInUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
