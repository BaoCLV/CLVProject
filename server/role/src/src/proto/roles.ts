// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: src/proto/roles.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "roles";

export interface GetRolePermissionsRequest {
  role: string;
}

export interface GetRolePermissionsResponse {
  permissions: string[];
}

function createBaseGetRolePermissionsRequest(): GetRolePermissionsRequest {
  return { role: "" };
}

export const GetRolePermissionsRequest: MessageFns<GetRolePermissionsRequest> = {
  encode(message: GetRolePermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRolePermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRolePermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRolePermissionsRequest {
    return { role: isSet(object.role) ? globalThis.String(object.role) : "" };
  },

  toJSON(message: GetRolePermissionsRequest): unknown {
    const obj: any = {};
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRolePermissionsRequest>, I>>(base?: I): GetRolePermissionsRequest {
    return GetRolePermissionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRolePermissionsRequest>, I>>(object: I): GetRolePermissionsRequest {
    const message = createBaseGetRolePermissionsRequest();
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseGetRolePermissionsResponse(): GetRolePermissionsResponse {
  return { permissions: [] };
}

export const GetRolePermissionsResponse: MessageFns<GetRolePermissionsResponse> = {
  encode(message: GetRolePermissionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRolePermissionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRolePermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRolePermissionsResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetRolePermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRolePermissionsResponse>, I>>(base?: I): GetRolePermissionsResponse {
    return GetRolePermissionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRolePermissionsResponse>, I>>(object: I): GetRolePermissionsResponse {
    const message = createBaseGetRolePermissionsResponse();
    message.permissions = object.permissions?.map((e) => e) || [];
    return message;
  },
};

export type RoleServiceDefinition = typeof RoleServiceDefinition;
export const RoleServiceDefinition = {
  name: "RoleService",
  fullName: "roles.RoleService",
  methods: {
    getRolePermissions: {
      name: "GetRolePermissions",
      requestType: GetRolePermissionsRequest,
      requestStream: false,
      responseType: GetRolePermissionsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export type RoleServiceService = typeof RoleServiceService;
export const RoleServiceService = {
  getRolePermissions: {
    path: "/roles.RoleService/GetRolePermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRolePermissionsRequest) =>
      Buffer.from(GetRolePermissionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetRolePermissionsRequest.decode(value),
    responseSerialize: (value: GetRolePermissionsResponse) =>
      Buffer.from(GetRolePermissionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetRolePermissionsResponse.decode(value),
  },
} as const;

export interface RoleServiceServer extends UntypedServiceImplementation {
  getRolePermissions: handleUnaryCall<GetRolePermissionsRequest, GetRolePermissionsResponse>;
}

export interface RoleServiceClient extends Client {
  getRolePermissions(
    request: GetRolePermissionsRequest,
    callback: (error: ServiceError | null, response: GetRolePermissionsResponse) => void,
  ): ClientUnaryCall;
  getRolePermissions(
    request: GetRolePermissionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetRolePermissionsResponse) => void,
  ): ClientUnaryCall;
  getRolePermissions(
    request: GetRolePermissionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetRolePermissionsResponse) => void,
  ): ClientUnaryCall;
}

export const RoleServiceClient = makeGenericClientConstructor(RoleServiceService, "roles.RoleService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RoleServiceClient;
  service: typeof RoleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
